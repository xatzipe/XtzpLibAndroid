name: Lib Build and Test

on:
  push:
    branches:
      - main
  release:
    types: [created]

jobs:
  build:
    name: Build
    # Run on external PRs, but not on internal PRs since those will be run by push to branch
    runs-on: ubuntu-latest
    outputs:
      code-version: ${{ steps.extract.outputs.CODE_VERSION }}
    steps:
      - name: Checkout project sources
        uses: actions/checkout@v4
      - uses: actions/setup-java@v4
        with:
          distribution: "temurin"
          java-version: "17"
      - name: Validate Gradle Wrapper
        uses: gradle/wrapper-validation-action@v2
      - name: Build with Gradle Wrapper
        run: echo "Simulate build" # ./gradlew build --full-stacktrace
        # uses: gradle/gradle-build-action@v3.1.0
        # with:
        #   gradle-version: wrapper
        #   arguments: build
      - id: extract
        name: Extract code version from gradle.properties
        run: echo "CODE_VERSION=$(awk -F= '$1~/VERSION_NAME/{print $2}' gradle.properties)" >> $GITHUB_OUTPUT

  # unit-tests:
  #   runs-on: ubuntu-latest
  #   needs: [build]
  #   permissions:
  #     contents: read
  #   steps:
  #     - name: Checkout project source code
  #       uses: actions/checkout@v4
  #     - name: set up JDK 17
  #       uses: actions/setup-java@v4
  #       with:
  #         java-version: 17
  #         distribution: "temurin"
  #     - name: Validate Gradle Wrapper
  #       uses: gradle/wrapper-validation-action@v2
  #     - name: Build with Gradle Wrapper
  #       uses: gradle/gradle-build-action@v3.1.0
  #       with:
  #         arguments: test --full-stacktrace

  build_mkdocs:
    if: github.event_name == 'push'
    runs-on: ubuntu-latest
    needs: [build]
    name: Build MkDocs and Deploy to gh-pages
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v4
      - name: Configure Git Credentials
        run: |
          git config user.name github-actions[bot]
          git config user.email 41898282+github-actions[bot]@users.noreply.github.com
      - uses: actions/setup-python@v5
        with:
          python-version: 3.x
      - run: echo "cache_id=$(date --utc '+%V')" >> $GITHUB_ENV
      - uses: actions/cache@v4
        with:
          key: mkdocs-material-${{ env.cache_id }}
          path: .cache
          restore-keys: |
            mkdocs-material-
      - run: pip install mkdocs-material
      - run: mkdocs build
      # Create artifact for next job (optional, if we want to avoid cloning again)
      - name: Create site artifact
        uses: actions/upload-artifact@v4
        with:
          name: site-content
          path: site/
          retention-days: 1

  deploy_dev_version:
    needs: build_mkdocs
    if: github.event_name == 'push' && !startsWith(github.ref, 'refs/tags/')
    runs-on: ubuntu-latest
    name: Deploy to Dev Environment
    steps:
      - name: Checkout gh-pages branch
        uses: actions/checkout@v3
        with:
          ref: main
          submodules: true
          lfs: false
      - name: Download site artifact
        uses: actions/download-artifact@v4
        with:
          name: site-content
          path: site
      - name: Build And Deploy
        id: builddeploy
        uses: Azure/static-web-apps-deploy@v1
        with:
          azure_static_web_apps_api_token: ${{ secrets.AZURE_STATIC_WEB_APPS_API_TOKEN_DEV_DEPLOYMENT }}
          repo_token: ${{ secrets.GITHUB_TOKEN }} # Used for Github integrations (i.e. PR comments)
          action: "upload"
          ###### Repository/Build Configurations - These values can be configured to match your app requirements. ######
          # For more information regarding Static Web App workflow configurations, please visit: https://aka.ms/swaworkflowconfig
          app_location: "/" # App source code path
          api_location: "" # Api source code path - optional
          output_location: "site" # Using the downloaded artifact directory
          skip_app_build: true # Skip building the app as it's already built by MkDocs
          ###### End of Repository/Build Configurations ######


  # android-tests:
  #   runs-on: ubuntu-latest
  #   timeout-minutes: 35
  #   # needs: [ unit-tests ]
  #   strategy:
  #     matrix:
  #       api-level: [26, 33]
  #       target: [google_apis]
  #       arch: [x86_64]
  #   permissions:
  #     contents: read
  #   steps:
  #     - name: Enable KVM
  #       run: |
  #         echo 'KERNEL=="kvm", GROUP="kvm", MODE="0666", OPTIONS+="static_node=kvm"' | sudo tee /etc/udev/rules.d/99-kvm4all.rules
  #         sudo udevadm control --reload-rules
  #         sudo udevadm trigger --name-match=kvm

  #     - name: Checkout the code
  #       uses: actions/checkout@v4

  #     - name: Gradle Setup
  #       uses: gradle/actions/setup-gradle@v3

  #     - name: Validate Gradle Wrapper
  #       uses: gradle/wrapper-validation-action@v3

  #     - name: AVD cache
  #       uses: actions/cache@v3
  #       id: avd-cache
  #       with:
  #         path: |
  #           ~/.android/avd/*
  #           ~/.android/adb*
  #         key: avd-${{ matrix.api-level }}-${{ matrix.target }}-${{ matrix.arch }}

  #     - name: create AVD and generate snapshot for caching
  #       if: steps.avd-cache.outputs.cache-hit != 'true'
  #       uses: reactivecircus/android-emulator-runner@v2
  #       with:
  #         api-level: ${{ matrix.api-level }}
  #         target: ${{ matrix.target }}
  #         arch: ${{ matrix.arch }}
  #         force-avd-creation: false
  #         emulator-options: -no-window -gpu swiftshader_indirect -noaudio -no-boot-anim -camera-back none
  #         disable-animations: false
  #         script: echo "Generated AVD snapshot for caching."

  #     - name: run tests
  #       uses: reactivecircus/android-emulator-runner@v2
  #       with:
  #         api-level: ${{ matrix.api-level }}
  #         target: ${{ matrix.target }}
  #         arch: ${{ matrix.arch }}
  #         force-avd-creation: false
  #         emulator-options: -no-snapshot-save -no-window -gpu swiftshader_indirect -noaudio -no-boot-anim -camera-back none
  #         disable-animations: true
  #         script: ./gradlew connectedCheck --stacktrace
#   publish-to-snapshot:
#     name: Publish SNAPSHOT to sonatype.org
#     needs: [ build ]
#     # Runs only in main
#     if: github.event_name != 'pull_request' && endsWith(needs.build.outputs.code-version, '-SNAPSHOT') && github.ref == 'refs/heads/main' &&  github.repository_owner == 'xatzipe'
#     runs-on: ubuntu-latest
#     permissions:
#       contents: read
#       packages: write
#     steps:
#       - name: Debug
#         run: |
#           echo github.event_name
#           echo ${{ github.event_name }}
#           echo ${{ needs.build.outputs.code-version }}
#           echo ${{ github.ref }}
#           echo ${{ github.repository_owner }}
#       - name: Checkout project sources
#         uses: actions/checkout@v4
#       - uses: actions/setup-java@v4
#         with:
#           distribution: 'temurin'
#           java-version: '17'
#       - name: Validate Gradle Wrapper
#         uses: gradle/wrapper-validation-action@v2
#       - name: Publish with Gradle Wrapper
#         uses: gradle/gradle-build-action@v3.1.0
#         with:
# #          arguments: publish --full-stacktrace
#           arguments: publishAllPublicationsToMavenCentral --full-stacktrace
#         env:
#           GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

#           ORG_GRADLE_PROJECT_signingInMemoryKeyId: ${{ secrets.OSSRH_GPG_KEY_ID }}
#           ORG_GRADLE_PROJECT_signingInMemoryKey: ${{ secrets.OSSRH_GPG_SECRET_KEY }}
#           ORG_GRADLE_PROJECT_signingInMemoryKeyPassword: ${{ secrets.OSSRH_GPG_PASSPHRASE }}
#           ORG_GRADLE_PROJECT_mavenCentralUsername: ${{ secrets.OSSRH_USERNAME }}
#           ORG_GRADLE_PROJECT_mavenCentralPassword: ${{ secrets.OSSRH_PASSWORD }}
#           GIT_REF_NAME: ${{ github.ref_name }}
