name: Lib Build and Test

on:
  pull_request:
    types: [opened, reopened]
  push:

jobs:
  build:
    name: Build
    # Run on external PRs, but not on internal PRs since those will be run by push to branch
    runs-on: ubuntu-latest
    outputs:
      code-version: ${{ steps.extract.outputs.CODE_VERSION }}
    steps:
      - name: Checkout project sources
        uses: actions/checkout@v4
      - uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'
      - name: Validate Gradle Wrapper
        uses: gradle/wrapper-validation-action@v2
      - name: Build with Gradle Wrapper
        uses: gradle/gradle-build-action@v3.1.0
        with:
          gradle-version: wrapper
          arguments: build
      - id: extract
        name: Extract code version from gradle.properties
        run: echo "CODE_VERSION=$(awk -F= '$1~/VERSION_NAME/{print $2}' gradle.properties)" >> $GITHUB_OUTPUT

  unit-tests:
    runs-on: ubuntu-latest
    needs: [ build ]
    permissions:
      contents: read
    steps:
      - name: Checkout project source code
        uses: actions/checkout@v4
      - name: set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: 17
          distribution: "temurin"
      - name: Validate Gradle Wrapper
        uses: gradle/wrapper-validation-action@v2
      - name: Build with Gradle Wrapper
        uses: gradle/gradle-build-action@v3.1.0
        with:
          arguments: test --full-stacktrace

  android-tests:
    runs-on: ubuntu-latest
    timeout-minutes: 35
    needs: [ unit-tests ]
    strategy:
      matrix:
        api-level: [26]
        target: [google_apis]
        # include:
        #   - api-level: 28
        #     target: default
        #     arch: x86_64
        #   - api-level: 33
        #     target: google_apis # emulator API 33 only exists with Google APIs
        #     arch: x86_64
    permissions:
      contents: read
    steps:
      - name: Checkout the code
        uses: actions/checkout@v4
      # - name: set up JDK 17
      #   uses: actions/setup-java@v4
          # with:
          #           java-version: 17
          #           distribution: "temurin"

      - name: Enable KVM
        run: |
          echo 'KERNEL=="kvm", GROUP="kvm", MODE="0666", OPTIONS+="static_node=kvm"' | sudo tee /etc/udev/rules.d/99-kvm4all.rules
          sudo udevadm control --reload-rules
          sudo udevadm trigger --name-match=kvm

      - name: Gradle cache
        uses: gradle/gradle-build-action@v2
        
      - name: AVD cache
        uses: actions/cache@v3
        id: avd-cache
        with:
          path: |
            ~/.android/avd/*
            ~/.android/adb*
          key: avd-${{ matrix.api-level }}

      - name: create AVD and generate snapshot for caching
        if: steps.avd-cache.outputs.cache-hit != 'true'
        uses: reactivecircus/android-emulator-runner@v2
        with:
          api-level: ${{ matrix.api-level }}
          force-avd-creation: false
          emulator-options: -no-window -gpu swiftshader_indirect -noaudio -no-boot-anim -camera-back none
          disable-animations: false
          script: echo "Generated AVD snapshot for caching."

      - name: run tests
        uses: reactivecircus/android-emulator-runner@v2
        with:
          api-level: ${{ matrix.api-level }}
          force-avd-creation: false
          emulator-options: -no-snapshot-save -no-window -gpu swiftshader_indirect -noaudio -no-boot-anim -camera-back none
          disable-animations: true
          script: ./gradlew connectedCheck --stacktrace
        
      # - name: Validate Gradle Wrapper
      #   uses: gradle/wrapper-validation-action@v2
      # - name: Run android tests
      #   uses: reactivecircus/android-emulator-runner@v2
      #   with:
      #     api-level: ${{ matrix.api-level }}
      #     target: ${{ matrix.target }}
      #     arch: ${{ matrix.arch }}
      #     script: ./gradlew $GRADLE_OPTS connectedCheck --stacktrace

  publish-to-snapshot:
    name: Publish SNAPSHOT to sonatype.org
    needs: [ build, unit-tests ]
    # Runs only in main
    if: github.event_name != 'pull_request' && endsWith(needs.build.outputs.code-version, '-SNAPSHOT') && github.ref == 'refs/heads/main' &&  github.repository_owner == 'xatzipe'
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    steps:
      - name: Debug
        run: |
          echo github.event_name
          echo ${{ github.event_name }}
          echo ${{ needs.build.outputs.code-version }}
          echo ${{ github.ref }}
          echo ${{ github.repository_owner }}
      - name: Checkout project sources
        uses: actions/checkout@v4
      - uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'
      - name: Validate Gradle Wrapper
        uses: gradle/wrapper-validation-action@v2
      - name: Publish with Gradle Wrapper
        uses: gradle/gradle-build-action@v3.1.0
        with:
#          arguments: publish --full-stacktrace
          arguments: publishAllPublicationsToMavenCentral --full-stacktrace
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

          ORG_GRADLE_PROJECT_signingInMemoryKeyId: ${{ secrets.OSSRH_GPG_KEY_ID }}
          ORG_GRADLE_PROJECT_signingInMemoryKey: ${{ secrets.OSSRH_GPG_SECRET_KEY }}
          ORG_GRADLE_PROJECT_signingInMemoryKeyPassword: ${{ secrets.OSSRH_GPG_PASSPHRASE }}
          ORG_GRADLE_PROJECT_mavenCentralUsername: ${{ secrets.OSSRH_USERNAME }}
          ORG_GRADLE_PROJECT_mavenCentralPassword: ${{ secrets.OSSRH_PASSWORD }}
          GIT_REF_NAME: ${{ github.ref_name }}